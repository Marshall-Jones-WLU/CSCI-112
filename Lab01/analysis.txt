Author:     Marshall Jones
Filename:   analysis.txt

The functions randomNumbers() and randomIndexes() both share the same goal to
create a list of unique random integers with n elements -- in other words, the
list will contain every number from 0 through n-1 in random order.

Comparing the speed of the functions randomNumbers() and randomIndexes(), they
execute at a very similar speed when the size is smaller. When the size is 10,
randomNumbers() is in general marginally slower (by about 1/10000 of a second).
However, as the size increases, randomNumbers() becomes exponentially slower.
When the size is 10,000, randomIndexes() generally executes over 200 times
faster than randomNumbers().

HOW THEY EXECUTE:
In the randomNumbers() function, the first line creates an empty list called
'result'. It then uses a while loop that iterates until the 'result' list has n
elements. Inside the while loop is a for loop that checks whether or not the
number in the current while iteration is unique to the other numbers it has
already appended to the result list. If the random number is not unique, it
goes back to the top of the while loop and finds another random integer.

In the randomIndexes() function, rather than creating an empty list, the
first line uses a list comprehension to make a list called 'result' with n
elements, all of the integer value '-1'. It then uses a for loop that iterates
exactly n times. Next, it chooses a random index position between 0 and n-1. It
then uses a while loop to check to make sure that the random index position
found above hasn't already been assigned a value. If the chosen index position
of 'result' is still -1, then it is assigned the value of 'num', which is equal
to the number of times the for loop has iterated, minus 1.

WHY ONE IS MORE EFFICIENT:
The randomIndexes() function is tremendously more efficient because the outer
loop iterates exactly n times. The inner loop only iterates as many times as it
takes to find an index position between 0 and n-1 that hasn't already been
assigned a value. It also assigns values in order from 0 to n-1; the randomness
is in the index positions that it assigns.
The randomNumbers() function is less efficient because for every iteration
through the outer loop, it also iterates through the entire 'result' list to
make sure the random number it just found isn't already present in the list. For
that reason, the randomNumbers() function takes significantly more time to
execute when n is a large number. If n is equal to 10,000, it demands a lot of
computing power and time to find that last unique number.

--------------------------------------------------------------------------------

In the new function randomShuffle(), I used a list comprehension to create a list
with n values ranging in order from 0 through n-1. I then created a for loop that 
iterates through the list. In the first line of the iteration, a random integer is 
generated between the values of i (the number of times the for loop has iterated
through the list, starting with 0) and n-1. Next, I assigned that random number to 
a new variable. Last, I swapped the values in the list between the index locations 
of i and the random number generated in the first line of the iteration. The
function continues until it finishes iterating through the list 'result'.

--------------------------------------------------------------------------------
TASK 3
a. Without running the code, I would expect the regular dictionary to possibly have
a similar order to the .csv, but I would not rely on it. However, I do expect to see 
the ordered dictionary in the exact same order as the .csv file.

c. After creating regular and ordered dictionaries with the same content and checking 
my findings with Google, it is now clear that my assumption in part (a) was somewhat 
accurate. I found that the regular ‘dictionary order is now guaranteed to be insertion 
order’ as of a recent update on python 3.6.